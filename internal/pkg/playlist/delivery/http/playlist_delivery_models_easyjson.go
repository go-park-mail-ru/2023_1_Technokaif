// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE5772aeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp(in *jlexer.Lexer, out *playlistUpdateInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "users":
			if in.IsNull() {
				in.Skip()
				out.UsersID = nil
			} else {
				in.Delim('[')
				if out.UsersID == nil {
					if !in.IsDelim(']') {
						out.UsersID = make([]uint32, 0, 16)
					} else {
						out.UsersID = []uint32{}
					}
				} else {
					out.UsersID = (out.UsersID)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uint32
					v1 = uint32(in.Uint32())
					out.UsersID = append(out.UsersID, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5772aeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp(out *jwriter.Writer, in playlistUpdateInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.UsersID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.UsersID {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playlistUpdateInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5772aeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playlistUpdateInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5772aeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp(l, v)
}
func easyjsonE5772aeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp1(in *jlexer.Lexer, out *playlistCreateResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5772aeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp1(out *jwriter.Writer, in playlistCreateResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playlistCreateResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5772aeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playlistCreateResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5772aeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp1(l, v)
}
func easyjsonE5772aeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp2(in *jlexer.Lexer, out *playlistCreateInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "users":
			if in.IsNull() {
				in.Skip()
				out.UsersID = nil
			} else {
				in.Delim('[')
				if out.UsersID == nil {
					if !in.IsDelim(']') {
						out.UsersID = make([]uint32, 0, 16)
					} else {
						out.UsersID = []uint32{}
					}
				} else {
					out.UsersID = (out.UsersID)[:0]
				}
				for !in.IsDelim(']') {
					var v4 uint32
					v4 = uint32(in.Uint32())
					out.UsersID = append(out.UsersID, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5772aeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp2(out *jwriter.Writer, in playlistCreateInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.UsersID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.UsersID {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v playlistCreateInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5772aeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *playlistCreateInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5772aeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp2(l, v)
}
func easyjsonE5772aeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp3(in *jlexer.Lexer, out *defaultResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE5772aeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp3(out *jwriter.Writer, in defaultResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v defaultResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE5772aeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *defaultResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE5772aeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgPlaylistDeliveryHttp3(l, v)
}
