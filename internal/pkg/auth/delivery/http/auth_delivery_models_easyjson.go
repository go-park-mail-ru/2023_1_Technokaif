// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp(in *jlexer.Lexer, out *signUpResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp(out *jwriter.Writer, in signUpResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v signUpResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *signUpResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp(l, v)
}
func easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp1(in *jlexer.Lexer, out *signUpInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "birthDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BirthDate).UnmarshalJSON(data))
			}
		case "avatarSrc":
			out.AvatarSrc = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp1(out *jwriter.Writer, in signUpInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"birthDate\":"
		out.RawString(prefix)
		out.Raw((in.BirthDate).MarshalJSON())
	}
	{
		const prefix string = ",\"avatarSrc\":"
		out.RawString(prefix)
		out.String(string(in.AvatarSrc))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v signUpInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *signUpInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp1(l, v)
}
func easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp2(in *jlexer.Lexer, out *logoutResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp2(out *jwriter.Writer, in logoutResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v logoutResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *logoutResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp2(l, v)
}
func easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp3(in *jlexer.Lexer, out *loginResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.UserID = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp3(out *jwriter.Writer, in loginResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.UserID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v loginResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *loginResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp3(l, v)
}
func easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp4(in *jlexer.Lexer, out *loginInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp4(out *jwriter.Writer, in loginInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v loginInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *loginInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp4(l, v)
}
func easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp5(in *jlexer.Lexer, out *isAuthenticatedResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "auth":
			out.Authenticated = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp5(out *jwriter.Writer, in isAuthenticatedResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"auth\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Authenticated))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v isAuthenticatedResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *isAuthenticatedResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp5(l, v)
}
func easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp6(in *jlexer.Lexer, out *changePassResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp6(out *jwriter.Writer, in changePassResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v changePassResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *changePassResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp6(l, v)
}
func easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp7(in *jlexer.Lexer, out *changePassInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "oldPassword":
			out.OldPassword = string(in.String())
		case "newPassword":
			out.NewPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp7(out *jwriter.Writer, in changePassInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"oldPassword\":"
		out.RawString(prefix[1:])
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"newPassword\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v changePassInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ec39bbeEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *changePassInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ec39bbeDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgAuthDeliveryHttp7(l, v)
}
