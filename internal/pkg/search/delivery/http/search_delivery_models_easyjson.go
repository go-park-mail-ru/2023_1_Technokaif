// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package delivery

import (
	json "encoding/json"
	http3 "github.com/go-park-mail-ru/2023_1_Technokaif/internal/pkg/album/delivery/http"
	http2 "github.com/go-park-mail-ru/2023_1_Technokaif/internal/pkg/artist/delivery/http"
	http1 "github.com/go-park-mail-ru/2023_1_Technokaif/internal/pkg/playlist/delivery/http"
	http "github.com/go-park-mail-ru/2023_1_Technokaif/internal/pkg/track/delivery/http"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE86c8d54DecodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp(in *jlexer.Lexer, out *searchTracksResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tracks":
			if in.IsNull() {
				in.Skip()
				out.Tracks = nil
			} else {
				in.Delim('[')
				if out.Tracks == nil {
					if !in.IsDelim(']') {
						out.Tracks = make([]http.TrackTransfer, 0, 0)
					} else {
						out.Tracks = []http.TrackTransfer{}
					}
				} else {
					out.Tracks = (out.Tracks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 http.TrackTransfer
					(v1).UnmarshalEasyJSON(in)
					out.Tracks = append(out.Tracks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE86c8d54EncodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp(out *jwriter.Writer, in searchTracksResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tracks\":"
		out.RawString(prefix[1:])
		if in.Tracks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Tracks {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v searchTracksResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE86c8d54EncodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *searchTracksResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE86c8d54DecodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp(l, v)
}
func easyjsonE86c8d54DecodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp1(in *jlexer.Lexer, out *searchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "amount":
			out.Amount = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE86c8d54EncodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp1(out *jwriter.Writer, in searchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Amount))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v searchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE86c8d54EncodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *searchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE86c8d54DecodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp1(l, v)
}
func easyjsonE86c8d54DecodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp2(in *jlexer.Lexer, out *searchPlaylistsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playlists":
			if in.IsNull() {
				in.Skip()
				out.Playlists = nil
			} else {
				in.Delim('[')
				if out.Playlists == nil {
					if !in.IsDelim(']') {
						out.Playlists = make([]http1.PlaylistTransfer, 0, 0)
					} else {
						out.Playlists = []http1.PlaylistTransfer{}
					}
				} else {
					out.Playlists = (out.Playlists)[:0]
				}
				for !in.IsDelim(']') {
					var v4 http1.PlaylistTransfer
					(v4).UnmarshalEasyJSON(in)
					out.Playlists = append(out.Playlists, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE86c8d54EncodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp2(out *jwriter.Writer, in searchPlaylistsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playlists\":"
		out.RawString(prefix[1:])
		if in.Playlists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Playlists {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v searchPlaylistsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE86c8d54EncodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *searchPlaylistsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE86c8d54DecodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp2(l, v)
}
func easyjsonE86c8d54DecodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp3(in *jlexer.Lexer, out *searchArtistsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "artists":
			if in.IsNull() {
				in.Skip()
				out.Artists = nil
			} else {
				in.Delim('[')
				if out.Artists == nil {
					if !in.IsDelim(']') {
						out.Artists = make([]http2.ArtistTransfer, 0, 1)
					} else {
						out.Artists = []http2.ArtistTransfer{}
					}
				} else {
					out.Artists = (out.Artists)[:0]
				}
				for !in.IsDelim(']') {
					var v7 http2.ArtistTransfer
					(v7).UnmarshalEasyJSON(in)
					out.Artists = append(out.Artists, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE86c8d54EncodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp3(out *jwriter.Writer, in searchArtistsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"artists\":"
		out.RawString(prefix[1:])
		if in.Artists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Artists {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v searchArtistsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE86c8d54EncodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *searchArtistsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE86c8d54DecodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp3(l, v)
}
func easyjsonE86c8d54DecodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp4(in *jlexer.Lexer, out *searchAlbumsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "albums":
			if in.IsNull() {
				in.Skip()
				out.Albums = nil
			} else {
				in.Delim('[')
				if out.Albums == nil {
					if !in.IsDelim(']') {
						out.Albums = make([]http3.AlbumTransfer, 0, 0)
					} else {
						out.Albums = []http3.AlbumTransfer{}
					}
				} else {
					out.Albums = (out.Albums)[:0]
				}
				for !in.IsDelim(']') {
					var v10 http3.AlbumTransfer
					(v10).UnmarshalEasyJSON(in)
					out.Albums = append(out.Albums, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE86c8d54EncodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp4(out *jwriter.Writer, in searchAlbumsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"albums\":"
		out.RawString(prefix[1:])
		if in.Albums == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Albums {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v searchAlbumsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE86c8d54EncodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *searchAlbumsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE86c8d54DecodeGithubComGoParkMailRu20231TechnokaifInternalPkgSearchDeliveryHttp4(l, v)
}
