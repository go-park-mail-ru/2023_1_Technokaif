// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp(in *jlexer.Lexer, out *trackLikeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp(out *jwriter.Writer, in trackLikeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v trackLikeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *trackLikeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp(l, v)
}
func easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp1(in *jlexer.Lexer, out *trackDeleteResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp1(out *jwriter.Writer, in trackDeleteResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v trackDeleteResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *trackDeleteResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp1(l, v)
}
func easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp2(in *jlexer.Lexer, out *trackCreateResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp2(out *jwriter.Writer, in trackCreateResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v trackCreateResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *trackCreateResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp2(l, v)
}
func easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp3(in *jlexer.Lexer, out *trackCreateInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "albumID":
			if in.IsNull() {
				in.Skip()
				out.AlbumID = nil
			} else {
				if out.AlbumID == nil {
					out.AlbumID = new(uint32)
				}
				*out.AlbumID = uint32(in.Uint32())
			}
		case "albumPosition":
			if in.IsNull() {
				in.Skip()
				out.AlbumPosition = nil
			} else {
				if out.AlbumPosition == nil {
					out.AlbumPosition = new(uint32)
				}
				*out.AlbumPosition = uint32(in.Uint32())
			}
		case "artistsID":
			if in.IsNull() {
				in.Skip()
				out.ArtistsID = nil
			} else {
				in.Delim('[')
				if out.ArtistsID == nil {
					if !in.IsDelim(']') {
						out.ArtistsID = make([]uint32, 0, 16)
					} else {
						out.ArtistsID = []uint32{}
					}
				} else {
					out.ArtistsID = (out.ArtistsID)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uint32
					v1 = uint32(in.Uint32())
					out.ArtistsID = append(out.ArtistsID, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "record":
			out.RecordSrc = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp3(out *jwriter.Writer, in trackCreateInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"albumID\":"
		out.RawString(prefix)
		if in.AlbumID == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.AlbumID))
		}
	}
	{
		const prefix string = ",\"albumPosition\":"
		out.RawString(prefix)
		if in.AlbumPosition == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.AlbumPosition))
		}
	}
	{
		const prefix string = ",\"artistsID\":"
		out.RawString(prefix)
		if in.ArtistsID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.ArtistsID {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"record\":"
		out.RawString(prefix)
		out.String(string(in.RecordSrc))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v trackCreateInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *trackCreateInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp3(l, v)
}
func easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp4(in *jlexer.Lexer, out *TrackTransfers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TrackTransfers, 0, 0)
			} else {
				*out = TrackTransfers{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 TrackTransfer
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp4(out *jwriter.Writer, in TrackTransfers) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrackTransfers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrackTransfers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp4(l, v)
}
func easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp5(in *jlexer.Lexer, out *TrackTransfer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "name":
			out.Name = string(in.String())
		case "albumID":
			if in.IsNull() {
				in.Skip()
				out.AlbumID = nil
			} else {
				if out.AlbumID == nil {
					out.AlbumID = new(uint32)
				}
				*out.AlbumID = uint32(in.Uint32())
			}
		case "albumPosition":
			if in.IsNull() {
				in.Skip()
				out.AlbumPosition = nil
			} else {
				if out.AlbumPosition == nil {
					out.AlbumPosition = new(uint32)
				}
				*out.AlbumPosition = uint32(in.Uint32())
			}
		case "artists":
			(out.Artists).UnmarshalEasyJSON(in)
		case "cover":
			out.CoverSrc = string(in.String())
		case "duration":
			out.Duration = uint32(in.Uint32())
		case "listens":
			out.Listens = uint32(in.Uint32())
		case "isLiked":
			out.IsLiked = bool(in.Bool())
		case "recordSrc":
			out.RecordSrc = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp5(out *jwriter.Writer, in TrackTransfer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.AlbumID != nil {
		const prefix string = ",\"albumID\":"
		out.RawString(prefix)
		out.Uint32(uint32(*in.AlbumID))
	}
	if in.AlbumPosition != nil {
		const prefix string = ",\"albumPosition\":"
		out.RawString(prefix)
		out.Uint32(uint32(*in.AlbumPosition))
	}
	{
		const prefix string = ",\"artists\":"
		out.RawString(prefix)
		(in.Artists).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix)
		out.String(string(in.CoverSrc))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Duration))
	}
	{
		const prefix string = ",\"listens\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Listens))
	}
	{
		const prefix string = ",\"isLiked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	{
		const prefix string = ",\"recordSrc\":"
		out.RawString(prefix)
		out.String(string(in.RecordSrc))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrackTransfer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6036cd6fEncodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrackTransfer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6036cd6fDecodeGithubComGoParkMailRu20231TechnokaifInternalPkgTrackDeliveryHttp5(l, v)
}
