// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetByID(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateInfo(ctx context.Context, in *UpdateInfoMsg, opts ...grpc.CallOption) (*UpdateInfoResponse, error)
	UploadAvatar(ctx context.Context, opts ...grpc.CallOption) (User_UploadAvatarClient, error)
	GetByPlaylist(ctx context.Context, in *GetByPlaylistMsg, opts ...grpc.CallOption) (*GetByPlaylistResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetByID(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.User/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateInfo(ctx context.Context, in *UpdateInfoMsg, opts ...grpc.CallOption) (*UpdateInfoResponse, error) {
	out := new(UpdateInfoResponse)
	err := c.cc.Invoke(ctx, "/user.User/UpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UploadAvatar(ctx context.Context, opts ...grpc.CallOption) (User_UploadAvatarClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], "/user.User/UploadAvatar", opts...)
	if err != nil {
		return nil, err
	}
	x := &userUploadAvatarClient{stream}
	return x, nil
}

type User_UploadAvatarClient interface {
	Send(*UploadAvatarMsg) error
	CloseAndRecv() (*UploadAvatarResponse, error)
	grpc.ClientStream
}

type userUploadAvatarClient struct {
	grpc.ClientStream
}

func (x *userUploadAvatarClient) Send(m *UploadAvatarMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userUploadAvatarClient) CloseAndRecv() (*UploadAvatarResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadAvatarResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) GetByPlaylist(ctx context.Context, in *GetByPlaylistMsg, opts ...grpc.CallOption) (*GetByPlaylistResponse, error) {
	out := new(GetByPlaylistResponse)
	err := c.cc.Invoke(ctx, "/user.User/GetByPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetByID(context.Context, *Id) (*UserResponse, error)
	UpdateInfo(context.Context, *UpdateInfoMsg) (*UpdateInfoResponse, error)
	UploadAvatar(User_UploadAvatarServer) error
	GetByPlaylist(context.Context, *GetByPlaylistMsg) (*GetByPlaylistResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetByID(context.Context, *Id) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedUserServer) UpdateInfo(context.Context, *UpdateInfoMsg) (*UpdateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfo not implemented")
}
func (UnimplementedUserServer) UploadAvatar(User_UploadAvatarServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAvatar not implemented")
}
func (UnimplementedUserServer) GetByPlaylist(context.Context, *GetByPlaylistMsg) (*GetByPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPlaylist not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetByID(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateInfo(ctx, req.(*UpdateInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UploadAvatar_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).UploadAvatar(&userUploadAvatarServer{stream})
}

type User_UploadAvatarServer interface {
	SendAndClose(*UploadAvatarResponse) error
	Recv() (*UploadAvatarMsg, error)
	grpc.ServerStream
}

type userUploadAvatarServer struct {
	grpc.ServerStream
}

func (x *userUploadAvatarServer) SendAndClose(m *UploadAvatarResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userUploadAvatarServer) Recv() (*UploadAvatarMsg, error) {
	m := new(UploadAvatarMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_GetByPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByPlaylistMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetByPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetByPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetByPlaylist(ctx, req.(*GetByPlaylistMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _User_GetByID_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _User_UpdateInfo_Handler,
		},
		{
			MethodName: "GetByPlaylist",
			Handler:    _User_GetByPlaylist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAvatar",
			Handler:       _User_UploadAvatar_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
