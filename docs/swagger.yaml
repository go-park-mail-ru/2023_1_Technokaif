basePath: /api/albums/feed
definitions:
  http.Error:
    properties:
      message:
        type: string
    type: object
  http.albumCreateInput:
    properties:
      artists:
        items:
          type: integer
        type: array
      cover:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  http.albumCreateResponse:
    properties:
      id:
        type: integer
    type: object
  http.albumDeleteResponse:
    properties:
      status:
        type: string
    type: object
  http.albumLikeResponse:
    properties:
      status:
        type: string
    type: object
  http.artistCreateInput:
    properties:
      cover:
        type: string
      name:
        type: string
    type: object
  http.artistCreateResponse:
    properties:
      id:
        type: integer
    type: object
  http.artistDeleteResponse:
    properties:
      status:
        type: string
    type: object
  http.artistLikeResponse:
    properties:
      status:
        type: string
    type: object
  http.defaultResponse:
    properties:
      status:
        type: string
    type: object
  http.loginInput:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  http.loginResponse:
    properties:
      id:
        type: integer
    type: object
  http.logoutResponse:
    properties:
      status:
        type: string
    type: object
  http.playlistCreateInput:
    properties:
      description:
        type: string
      name:
        type: string
      users:
        items:
          type: integer
        type: array
    type: object
  http.playlistCreateResponse:
    properties:
      id:
        type: integer
    type: object
  http.playlistUpdateInput:
    properties:
      description:
        type: string
      name:
        type: string
      users:
        items:
          type: integer
        type: array
    type: object
  http.signUpResponse:
    properties:
      id:
        type: integer
    type: object
  http.trackCreateInput:
    properties:
      albumID:
        type: integer
      albumPosition:
        type: integer
      artistsID:
        items:
          type: integer
        type: array
      name:
        type: string
      record:
        type: string
    type: object
  http.trackCreateResponse:
    properties:
      id:
        type: integer
    type: object
  http.trackDeleteResponse:
    properties:
      status:
        type: string
    type: object
  http.trackLikeResponse:
    properties:
      status:
        type: string
    type: object
  http.userInfoInput:
    properties:
      birthDate:
        $ref: '#/definitions/models.Date'
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      sex:
        $ref: '#/definitions/models.Sex'
    type: object
  http.userUploadAvatarResponse:
    properties:
      status:
        type: string
    type: object
  models.AlbumTransfer:
    properties:
      artists:
        items:
          $ref: '#/definitions/models.ArtistTransfer'
        type: array
      cover:
        type: string
      description:
        type: string
      id:
        type: integer
      isLiked:
        type: boolean
      name:
        type: string
    type: object
  models.ArtistTransfer:
    properties:
      cover:
        type: string
      id:
        type: integer
      isLiked:
        type: boolean
      name:
        type: string
    type: object
  models.Date:
    properties:
      time.Time:
        type: string
    type: object
  models.PlaylistTransfer:
    properties:
      cover:
        type: string
      description:
        type: string
      id:
        type: integer
      isLiked:
        type: boolean
      name:
        type: string
      users:
        items:
          $ref: '#/definitions/models.UserTransfer'
        type: array
    type: object
  models.Sex:
    enum:
    - M
    - F
    - O
    type: string
    x-enum-varnames:
    - Male
    - Female
    - Other
  models.TrackTransfer:
    properties:
      albumID:
        type: integer
      albumPosition:
        type: integer
      artists:
        items:
          $ref: '#/definitions/models.ArtistTransfer'
        type: array
      cover:
        type: string
      id:
        type: integer
      isLiked:
        type: boolean
      listens:
        type: integer
      name:
        type: string
      recordSrc:
        type: string
    type: object
  models.User:
    properties:
      avatarSrc:
        type: string
      birthDate:
        $ref: '#/definitions/models.Date'
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      sex:
        $ref: '#/definitions/models.Sex'
      username:
        type: string
    type: object
  models.UserTransfer:
    properties:
      avatarSrc:
        type: string
      birthDate:
        $ref: '#/definitions/models.Date'
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      sex:
        $ref: '#/definitions/models.Sex'
      username:
        type: string
    type: object
host: localhost:4443
info:
  contact:
    email: yarik1448kuzmin@gmail.com
    name: Fluire API Support
  description: Server API for Fluire Streaming Service Application
  title: Fluire API
  version: 1.0.1
paths:
  /api/albums/:
    post:
      consumes:
      - application/json
      description: Create new album by sent object
      parameters:
      - description: Album info
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/http.albumCreateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Album created
          schema:
            $ref: '#/definitions/http.albumCreateResponse'
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Create Album
      tags:
      - Album
  /api/albums/{albumID}/:
    delete:
      description: Delete album with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Album deleted
          schema:
            $ref: '#/definitions/http.albumDeleteResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Delete Album
      tags:
      - Album
    get:
      description: Get album with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Album got
          schema:
            $ref: '#/definitions/models.AlbumTransfer'
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Get Album
      tags:
      - Album
  /api/albums/{albumID}/like:
    post:
      description: Set like by user to chosen album (add to favorite)
      produces:
      - application/json
      responses:
        "200":
          description: Like set
          schema:
            $ref: '#/definitions/http.albumLikeResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Set like
      tags:
      - Album
  /api/albums/{albumID}/tracks:
    get:
      description: All tracks of album with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Show tracks
          schema:
            items:
              $ref: '#/definitions/models.TrackTransfer'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Tracks of Album
      tags:
      - Album
  /api/albums/{albumID}/unlike:
    post:
      description: Remove like by user from chosen album (remove from favorite)
      produces:
      - application/json
      responses:
        "200":
          description: Like removed
          schema:
            $ref: '#/definitions/http.albumLikeResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Remove like
      tags:
      - Album
  /api/albums/feed:
    get:
      description: Feed albums
      produces:
      - application/json
      responses:
        "200":
          description: Albums feed
          schema:
            items:
              $ref: '#/definitions/models.AlbumTransfer'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Album Feed
      tags:
      - Feed
  /api/artists/:
    post:
      consumes:
      - application/json
      description: Create new artist by sent object
      parameters:
      - description: Track info
        in: body
        name: artist
        required: true
        schema:
          $ref: '#/definitions/http.artistCreateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Artist created
          schema:
            $ref: '#/definitions/http.artistCreateResponse'
        "400":
          description: Incorrect body
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Create Artist
      tags:
      - Artist
  /api/artists/{artistID}/:
    delete:
      description: Delete artist with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Artist deleted
          schema:
            $ref: '#/definitions/http.artistDeleteResponse'
        "400":
          description: Incorrect body
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Delete Artist
      tags:
      - Artist
    get:
      description: Get artist with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Artist got
          schema:
            $ref: '#/definitions/models.ArtistTransfer'
        "400":
          description: Incorrect body
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Get Artist
      tags:
      - Artist
  /api/artists/{artistID}/albums:
    get:
      description: All albums of artist with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Show albums
          schema:
            items:
              $ref: '#/definitions/models.AlbumTransfer'
            type: array
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Albums of Artist
      tags:
      - Artist
  /api/artists/{artistID}/like:
    post:
      description: Set like by user to chosen artist (add to favorite)
      produces:
      - application/json
      responses:
        "200":
          description: Like set
          schema:
            $ref: '#/definitions/http.artistLikeResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Set like
      tags:
      - Artist
  /api/artists/{artistID}/tracks:
    get:
      description: All tracks of artist with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Show tracks
          schema:
            items:
              $ref: '#/definitions/models.TrackTransfer'
            type: array
        "400":
          description: Incorrect body
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Tracks of Artist
      tags:
      - Artist
  /api/artists/{artistID}/unlike:
    post:
      description: Remove like by user from chosen artist (remove from favorite)
      produces:
      - application/json
      responses:
        "200":
          description: Like removed
          schema:
            $ref: '#/definitions/http.artistLikeResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Remove like
      tags:
      - Artist
  /api/artists/feed:
    get:
      description: Feed artists
      produces:
      - application/json
      responses:
        "200":
          description: Artists feed
          schema:
            items:
              $ref: '#/definitions/models.ArtistTransfer'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Artist Feed
      tags:
      - Feed
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login account
      parameters:
      - description: username and password
        in: body
        name: userInput
        required: true
        schema:
          $ref: '#/definitions/http.loginInput'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/http.loginResponse'
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Sign In
      tags:
      - Auth
  /api/auth/logout:
    get:
      consumes:
      - application/json
      description: Logout account
      produces:
      - application/json
      responses:
        "200":
          description: User loged out
          schema:
            $ref: '#/definitions/http.logoutResponse'
        "400":
          description: Logout fail
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Log Out
      tags:
      - Auth
  /api/auth/signup:
    post:
      consumes:
      - application/json
      description: Create account
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/http.signUpResponse'
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Sign Up
      tags:
      - Auth
  /api/playlists/:
    post:
      consumes:
      - application/json
      description: Create new playlist by sent object
      parameters:
      - description: Playlist info
        in: body
        name: playlist
        required: true
        schema:
          $ref: '#/definitions/http.playlistCreateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Playlist created
          schema:
            $ref: '#/definitions/http.playlistCreateResponse'
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Create Playlist
      tags:
      - Playlist
  /api/playlists/{playlistID}/:
    delete:
      description: Delete playlist with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Playlist deleted
          schema:
            $ref: '#/definitions/http.defaultResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Delete Playlist
      tags:
      - Playlist
    get:
      description: Get playlist with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Playlist got
          schema:
            $ref: '#/definitions/models.PlaylistTransfer'
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Get Playlist
      tags:
      - Playlist
  /api/playlists/{playlistID}/cover:
    post:
      consumes:
      - multipart/form-data
      description: Update playlist cover
      parameters:
      - description: Cover file
        in: formData
        name: cover
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Cover updated
          schema:
            $ref: '#/definitions/http.defaultResponse'
        "400":
          description: Invalid form data
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User Unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Upload Cover
      tags:
      - Playlist
  /api/playlists/{playlistID}/like:
    post:
      description: Set like by user to chosen playlist (add to favorite)
      produces:
      - application/json
      responses:
        "200":
          description: Like set
          schema:
            $ref: '#/definitions/http.defaultResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Set like
      tags:
      - Playlist
  /api/playlists/{playlistID}/tracks:
    get:
      description: All tracks of playlist with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Show tracks
          schema:
            items:
              $ref: '#/definitions/models.TrackTransfer'
            type: array
        "400":
          description: Incorrect body
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Tracks of Playlist
      tags:
      - Playlist
  /api/playlists/{playlistID}/tracks/{trackID}:
    delete:
      description: Delete track from playlist
      produces:
      - application/json
      responses:
        "200":
          description: Track deleted
          schema:
            $ref: '#/definitions/http.playlistCreateResponse'
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Delete Track
      tags:
      - Playlist
    post:
      description: Add track into playlist
      produces:
      - application/json
      responses:
        "200":
          description: Track added
          schema:
            $ref: '#/definitions/http.playlistCreateResponse'
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Add Track
      tags:
      - Playlist
  /api/playlists/{playlistID}/unlike:
    post:
      description: Remove like by user from chosen playlist (remove from favorite)
      produces:
      - application/json
      responses:
        "200":
          description: Like removed
          schema:
            $ref: '#/definitions/http.defaultResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Remove like
      tags:
      - Playlist
  /api/playlists/{playlistID}/update:
    post:
      consumes:
      - application/json
      description: Update playlist
      parameters:
      - description: Playlist info
        in: body
        name: playlist
        required: true
        schema:
          $ref: '#/definitions/http.playlistUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Playlist updated
          schema:
            $ref: '#/definitions/http.defaultResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Update Playlist
      tags:
      - Playlist
  /api/playlists/feed:
    get:
      description: Feed playlists
      produces:
      - application/json
      responses:
        "200":
          description: Playlist feed
          schema:
            items:
              $ref: '#/definitions/models.PlaylistTransfer'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Playlist Feed
      tags:
      - Feed
  /api/tracks/:
    post:
      consumes:
      - application/json
      description: Create new track by sent object
      parameters:
      - description: Track info
        in: body
        name: track
        required: true
        schema:
          $ref: '#/definitions/http.trackCreateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Track created
          schema:
            $ref: '#/definitions/http.trackCreateResponse'
        "400":
          description: Incorrect body
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Create Track
      tags:
      - Track
  /api/tracks/{trackID}/:
    delete:
      description: Delete track with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Track deleted
          schema:
            $ref: '#/definitions/http.trackDeleteResponse'
        "400":
          description: No such track
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Delete Track
      tags:
      - Track
    get:
      description: Get track with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Track got
          schema:
            $ref: '#/definitions/models.TrackTransfer'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Get Track
      tags:
      - Track
  /api/tracks/{trackID}/like:
    post:
      description: Set like by user to chosen track (add to favorite)
      produces:
      - application/json
      responses:
        "200":
          description: Like set
          schema:
            $ref: '#/definitions/http.trackLikeResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Set like
      tags:
      - Track
  /api/tracks/{trackID}/unlike:
    post:
      description: Remove like by user from chosen track (remove from favorite)
      produces:
      - application/json
      responses:
        "200":
          description: Like removed
          schema:
            $ref: '#/definitions/http.trackLikeResponse'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Remove like
      tags:
      - Track
  /api/tracks/feed:
    get:
      description: Feed tracks
      produces:
      - application/json
      responses:
        "200":
          description: Tracks feed
          schema:
            items:
              $ref: '#/definitions/models.TrackTransfer'
            type: array
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Track Feed
      tags:
      - Feed
  /api/users/{userID}/:
    get:
      description: Get user with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: User got
          schema:
            $ref: '#/definitions/models.UserTransfer'
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: Unauthorized user
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: Forbidden user
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Can't get user
          schema:
            $ref: '#/definitions/http.Error'
      summary: Get User
      tags:
      - User
  /api/users/{userID}/avatar:
    post:
      consumes:
      - multipart/form-data
      description: Update user avatar
      parameters:
      - description: Avatar file
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Avatar updated
          schema:
            $ref: '#/definitions/http.userUploadAvatarResponse'
        "400":
          description: Invalid form data
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User Unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Upload Avatar
      tags:
      - User
  /api/users/{userID}/favorite/albums:
    get:
      description: Get user's favorite albums
      produces:
      - application/json
      responses:
        "200":
          description: Albums got
          schema:
            items:
              $ref: '#/definitions/models.AlbumTransfer'
            type: array
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: Unauthorized user
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: Forbidden user
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Favorite Albums
      tags:
      - Favorite
  /api/users/{userID}/favorite/artists:
    get:
      description: Get user's favorite artists
      produces:
      - application/json
      responses:
        "200":
          description: Artists got
          schema:
            items:
              $ref: '#/definitions/models.ArtistTransfer'
            type: array
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: Unauthorized user
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: Forbidden user
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Favorite Artists
      tags:
      - Favorite
  /api/users/{userID}/favorite/playlists:
    get:
      description: Get user's favorite playlists
      produces:
      - application/json
      responses:
        "200":
          description: Playlists got
          schema:
            items:
              $ref: '#/definitions/models.PlaylistTransfer'
            type: array
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: Unauthorized user
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: Forbidden user
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Favorite Playlists
      tags:
      - Favorite
  /api/users/{userID}/favorite/tracks:
    get:
      description: Get ser's avorite tracks
      produces:
      - application/json
      responses:
        "200":
          description: Tracks got
          schema:
            items:
              $ref: '#/definitions/models.TrackTransfer'
            type: array
        "400":
          description: Incorrect input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: Unauthorized user
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: Forbidden user
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Favorite Tracks
      tags:
      - Favorite
  /api/users/{userID}/playlists:
    get:
      description: All playlists of user with chosen ID
      produces:
      - application/json
      responses:
        "200":
          description: Show playlists
          schema:
            items:
              $ref: '#/definitions/models.PlaylistTransfer'
            type: array
        "400":
          description: Client error
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/http.Error'
      summary: Playlists of User
      tags:
      - User
  /api/users/{userID}/update:
    post:
      consumes:
      - application/json
      description: Update info about user
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/http.userInfoInput'
      produces:
      - application/json
      responses:
        "200":
          description: User info updated
          schema:
            $ref: '#/definitions/http.userUploadAvatarResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/http.Error'
        "401":
          description: User Unathorized
          schema:
            $ref: '#/definitions/http.Error'
        "403":
          description: User hasn't rights
          schema:
            $ref: '#/definitions/http.Error'
        "500":
          description: Can't change user info
          schema:
            $ref: '#/definitions/http.Error'
      summary: Update Info
      tags:
      - User
swagger: "2.0"
