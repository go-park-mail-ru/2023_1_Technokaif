// Code generated by MockGen. DO NOT EDIT.
// Source: playlist.go

// Package mock_playlist is a generated GoMock package.
package mock_playlist

import (
	io "io"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_Technokaif/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddTrack mocks base method.
func (m *MockUsecase) AddTrack(trackID, playlistID, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrack", trackID, playlistID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrack indicates an expected call of AddTrack.
func (mr *MockUsecaseMockRecorder) AddTrack(trackID, playlistID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrack", reflect.TypeOf((*MockUsecase)(nil).AddTrack), trackID, playlistID, userID)
}

// Create mocks base method.
func (m *MockUsecase) Create(playlist models.Playlist, usersID []uint32, userID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", playlist, usersID, userID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(playlist, usersID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), playlist, usersID, userID)
}

// Delete mocks base method.
func (m *MockUsecase) Delete(playlistID, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", playlistID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUsecaseMockRecorder) Delete(playlistID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsecase)(nil).Delete), playlistID, userID)
}

// DeleteTrack mocks base method.
func (m *MockUsecase) DeleteTrack(trackID, playlistID, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrack", trackID, playlistID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrack indicates an expected call of DeleteTrack.
func (mr *MockUsecaseMockRecorder) DeleteTrack(trackID, playlistID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrack", reflect.TypeOf((*MockUsecase)(nil).DeleteTrack), trackID, playlistID, userID)
}

// GetByID mocks base method.
func (m *MockUsecase) GetByID(playlistID uint32) (*models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", playlistID)
	ret0, _ := ret[0].(*models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsecaseMockRecorder) GetByID(playlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsecase)(nil).GetByID), playlistID)
}

// GetByUser mocks base method.
func (m *MockUsecase) GetByUser(userID uint32) ([]models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", userID)
	ret0, _ := ret[0].([]models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockUsecaseMockRecorder) GetByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockUsecase)(nil).GetByUser), userID)
}

// GetFeed mocks base method.
func (m *MockUsecase) GetFeed() ([]models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed")
	ret0, _ := ret[0].([]models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockUsecaseMockRecorder) GetFeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockUsecase)(nil).GetFeed))
}

// GetLikedByUser mocks base method.
func (m *MockUsecase) GetLikedByUser(userID uint32) ([]models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikedByUser", userID)
	ret0, _ := ret[0].([]models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikedByUser indicates an expected call of GetLikedByUser.
func (mr *MockUsecaseMockRecorder) GetLikedByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikedByUser", reflect.TypeOf((*MockUsecase)(nil).GetLikedByUser), userID)
}

// IsLiked mocks base method.
func (m *MockUsecase) IsLiked(artistID, userID uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLiked", artistID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLiked indicates an expected call of IsLiked.
func (mr *MockUsecaseMockRecorder) IsLiked(artistID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLiked", reflect.TypeOf((*MockUsecase)(nil).IsLiked), artistID, userID)
}

// SetLike mocks base method.
func (m *MockUsecase) SetLike(playlistID, userID uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLike", playlistID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLike indicates an expected call of SetLike.
func (mr *MockUsecaseMockRecorder) SetLike(playlistID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLike", reflect.TypeOf((*MockUsecase)(nil).SetLike), playlistID, userID)
}

// UnLike mocks base method.
func (m *MockUsecase) UnLike(playlistID, userID uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnLike", playlistID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnLike indicates an expected call of UnLike.
func (mr *MockUsecaseMockRecorder) UnLike(playlistID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnLike", reflect.TypeOf((*MockUsecase)(nil).UnLike), playlistID, userID)
}

// UpdateInfoAndMembers mocks base method.
func (m *MockUsecase) UpdateInfoAndMembers(playlist models.Playlist, usersID []uint32, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfoAndMembers", playlist, usersID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInfoAndMembers indicates an expected call of UpdateInfoAndMembers.
func (mr *MockUsecaseMockRecorder) UpdateInfoAndMembers(playlist, usersID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfoAndMembers", reflect.TypeOf((*MockUsecase)(nil).UpdateInfoAndMembers), playlist, usersID, userID)
}

// UploadCover mocks base method.
func (m *MockUsecase) UploadCover(playlistID, userID uint32, file io.ReadSeeker, fileExtension string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadCover", playlistID, userID, file, fileExtension)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadCover indicates an expected call of UploadCover.
func (mr *MockUsecaseMockRecorder) UploadCover(playlistID, userID, file, fileExtension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadCover", reflect.TypeOf((*MockUsecase)(nil).UploadCover), playlistID, userID, file, fileExtension)
}

// UploadCoverWrongFormatError mocks base method.
func (m *MockUsecase) UploadCoverWrongFormatError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadCoverWrongFormatError")
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadCoverWrongFormatError indicates an expected call of UploadCoverWrongFormatError.
func (mr *MockUsecaseMockRecorder) UploadCoverWrongFormatError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadCoverWrongFormatError", reflect.TypeOf((*MockUsecase)(nil).UploadCoverWrongFormatError))
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddTrack mocks base method.
func (m *MockRepository) AddTrack(trackID, playlistID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrack", trackID, playlistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrack indicates an expected call of AddTrack.
func (mr *MockRepositoryMockRecorder) AddTrack(trackID, playlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrack", reflect.TypeOf((*MockRepository)(nil).AddTrack), trackID, playlistID)
}

// DeleteByID mocks base method.
func (m *MockRepository) DeleteByID(playlistID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", playlistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockRepositoryMockRecorder) DeleteByID(playlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRepository)(nil).DeleteByID), playlistID)
}

// DeleteLike mocks base method.
func (m *MockRepository) DeleteLike(playlistID, userID uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", playlistID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockRepositoryMockRecorder) DeleteLike(playlistID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockRepository)(nil).DeleteLike), playlistID, userID)
}

// DeleteTrack mocks base method.
func (m *MockRepository) DeleteTrack(trackID, playlistID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrack", trackID, playlistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrack indicates an expected call of DeleteTrack.
func (mr *MockRepositoryMockRecorder) DeleteTrack(trackID, playlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrack", reflect.TypeOf((*MockRepository)(nil).DeleteTrack), trackID, playlistID)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(playlistID uint32) (*models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", playlistID)
	ret0, _ := ret[0].(*models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(playlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), playlistID)
}

// GetByUser mocks base method.
func (m *MockRepository) GetByUser(userID uint32) ([]models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", userID)
	ret0, _ := ret[0].([]models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockRepositoryMockRecorder) GetByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockRepository)(nil).GetByUser), userID)
}

// GetFeed mocks base method.
func (m *MockRepository) GetFeed() ([]models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed")
	ret0, _ := ret[0].([]models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockRepositoryMockRecorder) GetFeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockRepository)(nil).GetFeed))
}

// GetLikedByUser mocks base method.
func (m *MockRepository) GetLikedByUser(userID uint32) ([]models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikedByUser", userID)
	ret0, _ := ret[0].([]models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikedByUser indicates an expected call of GetLikedByUser.
func (mr *MockRepositoryMockRecorder) GetLikedByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikedByUser", reflect.TypeOf((*MockRepository)(nil).GetLikedByUser), userID)
}

// Insert mocks base method.
func (m *MockRepository) Insert(playlist models.Playlist, usersID []uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", playlist, usersID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(playlist, usersID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), playlist, usersID)
}

// InsertLike mocks base method.
func (m *MockRepository) InsertLike(playlistID, userID uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLike", playlistID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLike indicates an expected call of InsertLike.
func (mr *MockRepositoryMockRecorder) InsertLike(playlistID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLike", reflect.TypeOf((*MockRepository)(nil).InsertLike), playlistID, userID)
}

// IsLiked mocks base method.
func (m *MockRepository) IsLiked(artistID, userID uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLiked", artistID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLiked indicates an expected call of IsLiked.
func (mr *MockRepositoryMockRecorder) IsLiked(artistID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLiked", reflect.TypeOf((*MockRepository)(nil).IsLiked), artistID, userID)
}

// Update mocks base method.
func (m *MockRepository) Update(playlist models.Playlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", playlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), playlist)
}

// UpdateWithMembers mocks base method.
func (m *MockRepository) UpdateWithMembers(playlist models.Playlist, usersID []uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithMembers", playlist, usersID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithMembers indicates an expected call of UpdateWithMembers.
func (mr *MockRepositoryMockRecorder) UpdateWithMembers(playlist, usersID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithMembers", reflect.TypeOf((*MockRepository)(nil).UpdateWithMembers), playlist, usersID)
}

// MockTables is a mock of Tables interface.
type MockTables struct {
	ctrl     *gomock.Controller
	recorder *MockTablesMockRecorder
}

// MockTablesMockRecorder is the mock recorder for MockTables.
type MockTablesMockRecorder struct {
	mock *MockTables
}

// NewMockTables creates a new mock instance.
func NewMockTables(ctrl *gomock.Controller) *MockTables {
	mock := &MockTables{ctrl: ctrl}
	mock.recorder = &MockTablesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTables) EXPECT() *MockTablesMockRecorder {
	return m.recorder
}

// LikedPlaylists mocks base method.
func (m *MockTables) LikedPlaylists() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikedPlaylists")
	ret0, _ := ret[0].(string)
	return ret0
}

// LikedPlaylists indicates an expected call of LikedPlaylists.
func (mr *MockTablesMockRecorder) LikedPlaylists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikedPlaylists", reflect.TypeOf((*MockTables)(nil).LikedPlaylists))
}

// Playlists mocks base method.
func (m *MockTables) Playlists() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Playlists")
	ret0, _ := ret[0].(string)
	return ret0
}

// Playlists indicates an expected call of Playlists.
func (mr *MockTablesMockRecorder) Playlists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Playlists", reflect.TypeOf((*MockTables)(nil).Playlists))
}

// PlaylistsTracks mocks base method.
func (m *MockTables) PlaylistsTracks() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaylistsTracks")
	ret0, _ := ret[0].(string)
	return ret0
}

// PlaylistsTracks indicates an expected call of PlaylistsTracks.
func (mr *MockTablesMockRecorder) PlaylistsTracks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaylistsTracks", reflect.TypeOf((*MockTables)(nil).PlaylistsTracks))
}

// UsersPlaylists mocks base method.
func (m *MockTables) UsersPlaylists() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersPlaylists")
	ret0, _ := ret[0].(string)
	return ret0
}

// UsersPlaylists indicates an expected call of UsersPlaylists.
func (mr *MockTablesMockRecorder) UsersPlaylists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersPlaylists", reflect.TypeOf((*MockTables)(nil).UsersPlaylists))
}
