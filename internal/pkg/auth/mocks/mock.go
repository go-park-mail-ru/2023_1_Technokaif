// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_Technokaif/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUsecase) ChangePassword(ctx context.Context, userID uint32, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUsecaseMockRecorder) ChangePassword(ctx, userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUsecase)(nil).ChangePassword), ctx, userID, password)
}

// GetUserByAuthData mocks base method.
func (m *MockUsecase) GetUserByAuthData(ctx context.Context, userID, userVersion uint32) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuthData", ctx, userID, userVersion)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAuthData indicates an expected call of GetUserByAuthData.
func (mr *MockUsecaseMockRecorder) GetUserByAuthData(ctx, userID, userVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuthData", reflect.TypeOf((*MockUsecase)(nil).GetUserByAuthData), ctx, userID, userVersion)
}

// GetUserByCreds mocks base method.
func (m *MockUsecase) GetUserByCreds(ctx context.Context, username, plainPassword string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCreds", ctx, username, plainPassword)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCreds indicates an expected call of GetUserByCreds.
func (mr *MockUsecaseMockRecorder) GetUserByCreds(ctx, username, plainPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCreds", reflect.TypeOf((*MockUsecase)(nil).GetUserByCreds), ctx, username, plainPassword)
}

// IncreaseUserVersion mocks base method.
func (m *MockUsecase) IncreaseUserVersion(ctx context.Context, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseUserVersion", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseUserVersion indicates an expected call of IncreaseUserVersion.
func (mr *MockUsecaseMockRecorder) IncreaseUserVersion(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseUserVersion", reflect.TypeOf((*MockUsecase)(nil).IncreaseUserVersion), ctx, userID)
}

// SignUpUser mocks base method.
func (m *MockUsecase) SignUpUser(ctx context.Context, user models.User) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUser", ctx, user)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpUser indicates an expected call of SignUpUser.
func (mr *MockUsecaseMockRecorder) SignUpUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUser", reflect.TypeOf((*MockUsecase)(nil).SignUpUser), ctx, user)
}

// MockAgent is a mock of Agent interface.
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
}

// MockAgentMockRecorder is the mock recorder for MockAgent.
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance.
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockAgent) ChangePassword(ctx context.Context, userID uint32, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAgentMockRecorder) ChangePassword(ctx, userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAgent)(nil).ChangePassword), ctx, userID, password)
}

// GetUserByAuthData mocks base method.
func (m *MockAgent) GetUserByAuthData(ctx context.Context, userID, userVersion uint32) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuthData", ctx, userID, userVersion)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAuthData indicates an expected call of GetUserByAuthData.
func (mr *MockAgentMockRecorder) GetUserByAuthData(ctx, userID, userVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuthData", reflect.TypeOf((*MockAgent)(nil).GetUserByAuthData), ctx, userID, userVersion)
}

// GetUserByCreds mocks base method.
func (m *MockAgent) GetUserByCreds(ctx context.Context, username, plainPassword string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCreds", ctx, username, plainPassword)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCreds indicates an expected call of GetUserByCreds.
func (mr *MockAgentMockRecorder) GetUserByCreds(ctx, username, plainPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCreds", reflect.TypeOf((*MockAgent)(nil).GetUserByCreds), ctx, username, plainPassword)
}

// IncreaseUserVersion mocks base method.
func (m *MockAgent) IncreaseUserVersion(ctx context.Context, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseUserVersion", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseUserVersion indicates an expected call of IncreaseUserVersion.
func (mr *MockAgentMockRecorder) IncreaseUserVersion(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseUserVersion", reflect.TypeOf((*MockAgent)(nil).IncreaseUserVersion), ctx, userID)
}

// SignUpUser mocks base method.
func (m *MockAgent) SignUpUser(ctx context.Context, user models.User) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUser", ctx, user)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpUser indicates an expected call of SignUpUser.
func (mr *MockAgentMockRecorder) SignUpUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUser", reflect.TypeOf((*MockAgent)(nil).SignUpUser), ctx, user)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUserByAuthData mocks base method.
func (m *MockRepository) GetUserByAuthData(ctx context.Context, userID, userVersion uint32) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuthData", ctx, userID, userVersion)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAuthData indicates an expected call of GetUserByAuthData.
func (mr *MockRepositoryMockRecorder) GetUserByAuthData(ctx, userID, userVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuthData", reflect.TypeOf((*MockRepository)(nil).GetUserByAuthData), ctx, userID, userVersion)
}

// IncreaseUserVersion mocks base method.
func (m *MockRepository) IncreaseUserVersion(ctx context.Context, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseUserVersion", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseUserVersion indicates an expected call of IncreaseUserVersion.
func (mr *MockRepositoryMockRecorder) IncreaseUserVersion(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseUserVersion", reflect.TypeOf((*MockRepository)(nil).IncreaseUserVersion), ctx, userID)
}

// UpdatePassword mocks base method.
func (m *MockRepository) UpdatePassword(ctx context.Context, userID uint32, passwordHash, salt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userID, passwordHash, salt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockRepositoryMockRecorder) UpdatePassword(ctx, userID, passwordHash, salt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockRepository)(nil).UpdatePassword), ctx, userID, passwordHash, salt)
}

// MockTables is a mock of Tables interface.
type MockTables struct {
	ctrl     *gomock.Controller
	recorder *MockTablesMockRecorder
}

// MockTablesMockRecorder is the mock recorder for MockTables.
type MockTablesMockRecorder struct {
	mock *MockTables
}

// NewMockTables creates a new mock instance.
func NewMockTables(ctrl *gomock.Controller) *MockTables {
	mock := &MockTables{ctrl: ctrl}
	mock.recorder = &MockTablesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTables) EXPECT() *MockTablesMockRecorder {
	return m.recorder
}

// Users mocks base method.
func (m *MockTables) Users() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(string)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockTablesMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockTables)(nil).Users))
}
