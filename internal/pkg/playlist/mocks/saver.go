// Code generated by MockGen. DO NOT EDIT.
// Source: playlist_usecase.go

// Package mock_playlist is a generated GoMock package.
package mock_playlist

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoverSaver is a mock of CoverSaver interface.
type MockCoverSaver struct {
	ctrl     *gomock.Controller
	recorder *MockCoverSaverMockRecorder
}

// MockCoverSaverMockRecorder is the mock recorder for MockCoverSaver.
type MockCoverSaverMockRecorder struct {
	mock *MockCoverSaver
}

// NewMockCoverSaver creates a new mock instance.
func NewMockCoverSaver(ctrl *gomock.Controller) *MockCoverSaver {
	mock := &MockCoverSaver{ctrl: ctrl}
	mock.recorder = &MockCoverSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoverSaver) EXPECT() *MockCoverSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockCoverSaver) Save(ctx context.Context, cover io.Reader, objectName string, size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, cover, objectName, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCoverSaverMockRecorder) Save(ctx, cover, objectName, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCoverSaver)(nil).Save), ctx, cover, objectName, size)
}
