// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_Technokaif/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CheckAccessToken mocks base method.
func (m *MockAuth) CheckAccessToken(accessToken string) (uint, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccessToken", accessToken)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckAccessToken indicates an expected call of CheckAccessToken.
func (mr *MockAuthMockRecorder) CheckAccessToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccessToken", reflect.TypeOf((*MockAuth)(nil).CheckAccessToken), accessToken)
}

// CreateUser mocks base method.
func (m *MockAuth) CreateUser(user models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuth)(nil).CreateUser), user)
}

// GenerateAccessToken mocks base method.
func (m *MockAuth) GenerateAccessToken(userID, userVersion uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", userID, userVersion)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockAuthMockRecorder) GenerateAccessToken(userID, userVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockAuth)(nil).GenerateAccessToken), userID, userVersion)
}

// GetUserByAuthData mocks base method.
func (m *MockAuth) GetUserByAuthData(userID, userVersion uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuthData", userID, userVersion)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAuthData indicates an expected call of GetUserByAuthData.
func (mr *MockAuthMockRecorder) GetUserByAuthData(userID, userVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuthData", reflect.TypeOf((*MockAuth)(nil).GetUserByAuthData), userID, userVersion)
}

// GetUserByCreds mocks base method.
func (m *MockAuth) GetUserByCreds(username, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCreds", username, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCreds indicates an expected call of GetUserByCreds.
func (mr *MockAuthMockRecorder) GetUserByCreds(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCreds", reflect.TypeOf((*MockAuth)(nil).GetUserByCreds), username, password)
}

// IncreaseUserVersion mocks base method.
func (m *MockAuth) IncreaseUserVersion(userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseUserVersion", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseUserVersion indicates an expected call of IncreaseUserVersion.
func (mr *MockAuthMockRecorder) IncreaseUserVersion(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseUserVersion", reflect.TypeOf((*MockAuth)(nil).IncreaseUserVersion), userID)
}

// LoginUser mocks base method.
func (m *MockAuth) LoginUser(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthMockRecorder) LoginUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuth)(nil).LoginUser), username, password)
}

// MockAlbum is a mock of Album interface.
type MockAlbum struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumMockRecorder
}

// MockAlbumMockRecorder is the mock recorder for MockAlbum.
type MockAlbumMockRecorder struct {
	mock *MockAlbum
}

// NewMockAlbum creates a new mock instance.
func NewMockAlbum(ctrl *gomock.Controller) *MockAlbum {
	mock := &MockAlbum{ctrl: ctrl}
	mock.recorder = &MockAlbumMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbum) EXPECT() *MockAlbumMockRecorder {
	return m.recorder
}

// GetFeed mocks base method.
func (m *MockAlbum) GetFeed() ([]models.AlbumFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed")
	ret0, _ := ret[0].([]models.AlbumFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockAlbumMockRecorder) GetFeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockAlbum)(nil).GetFeed))
}

// MockArtist is a mock of Artist interface.
type MockArtist struct {
	ctrl     *gomock.Controller
	recorder *MockArtistMockRecorder
}

// MockArtistMockRecorder is the mock recorder for MockArtist.
type MockArtistMockRecorder struct {
	mock *MockArtist
}

// NewMockArtist creates a new mock instance.
func NewMockArtist(ctrl *gomock.Controller) *MockArtist {
	mock := &MockArtist{ctrl: ctrl}
	mock.recorder = &MockArtistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtist) EXPECT() *MockArtistMockRecorder {
	return m.recorder
}

// GetFeed mocks base method.
func (m *MockArtist) GetFeed() ([]models.ArtistFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed")
	ret0, _ := ret[0].([]models.ArtistFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockArtistMockRecorder) GetFeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockArtist)(nil).GetFeed))
}

// MockTrack is a mock of Track interface.
type MockTrack struct {
	ctrl     *gomock.Controller
	recorder *MockTrackMockRecorder
}

// MockTrackMockRecorder is the mock recorder for MockTrack.
type MockTrackMockRecorder struct {
	mock *MockTrack
}

// NewMockTrack creates a new mock instance.
func NewMockTrack(ctrl *gomock.Controller) *MockTrack {
	mock := &MockTrack{ctrl: ctrl}
	mock.recorder = &MockTrackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrack) EXPECT() *MockTrackMockRecorder {
	return m.recorder
}

// GetFeed mocks base method.
func (m *MockTrack) GetFeed() ([]models.TrackFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed")
	ret0, _ := ret[0].([]models.TrackFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockTrackMockRecorder) GetFeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockTrack)(nil).GetFeed))
}
