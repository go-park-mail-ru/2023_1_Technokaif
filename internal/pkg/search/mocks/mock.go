// Code generated by MockGen. DO NOT EDIT.
// Source: search.go

// Package mock_search is a generated GoMock package.
package mock_search

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_Technokaif/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// FindAlbums mocks base method.
func (m *MockUsecase) FindAlbums(ctx context.Context, query string, amount uint32) ([]models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAlbums", ctx, query, amount)
	ret0, _ := ret[0].([]models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAlbums indicates an expected call of FindAlbums.
func (mr *MockUsecaseMockRecorder) FindAlbums(ctx, query, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAlbums", reflect.TypeOf((*MockUsecase)(nil).FindAlbums), ctx, query, amount)
}

// FindArtists mocks base method.
func (m *MockUsecase) FindArtists(ctx context.Context, query string, amount uint32) ([]models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArtists", ctx, query, amount)
	ret0, _ := ret[0].([]models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindArtists indicates an expected call of FindArtists.
func (mr *MockUsecaseMockRecorder) FindArtists(ctx, query, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArtists", reflect.TypeOf((*MockUsecase)(nil).FindArtists), ctx, query, amount)
}

// FindPlaylists mocks base method.
func (m *MockUsecase) FindPlaylists(ctx context.Context, query string, amount uint32) ([]models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlaylists", ctx, query, amount)
	ret0, _ := ret[0].([]models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPlaylists indicates an expected call of FindPlaylists.
func (mr *MockUsecaseMockRecorder) FindPlaylists(ctx, query, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlaylists", reflect.TypeOf((*MockUsecase)(nil).FindPlaylists), ctx, query, amount)
}

// FindTracks mocks base method.
func (m *MockUsecase) FindTracks(ctx context.Context, query string, amount uint32) ([]models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTracks", ctx, query, amount)
	ret0, _ := ret[0].([]models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTracks indicates an expected call of FindTracks.
func (mr *MockUsecaseMockRecorder) FindTracks(ctx, query, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTracks", reflect.TypeOf((*MockUsecase)(nil).FindTracks), ctx, query, amount)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FullTextSearchAlbums mocks base method.
func (m *MockRepository) FullTextSearchAlbums(ctx context.Context, query string, limit uint32) ([]models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullTextSearchAlbums", ctx, query, limit)
	ret0, _ := ret[0].([]models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullTextSearchAlbums indicates an expected call of FullTextSearchAlbums.
func (mr *MockRepositoryMockRecorder) FullTextSearchAlbums(ctx, query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullTextSearchAlbums", reflect.TypeOf((*MockRepository)(nil).FullTextSearchAlbums), ctx, query, limit)
}

// FullTextSearchArtists mocks base method.
func (m *MockRepository) FullTextSearchArtists(ctx context.Context, query string, limit uint32) ([]models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullTextSearchArtists", ctx, query, limit)
	ret0, _ := ret[0].([]models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullTextSearchArtists indicates an expected call of FullTextSearchArtists.
func (mr *MockRepositoryMockRecorder) FullTextSearchArtists(ctx, query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullTextSearchArtists", reflect.TypeOf((*MockRepository)(nil).FullTextSearchArtists), ctx, query, limit)
}

// FullTextSearchPlaylists mocks base method.
func (m *MockRepository) FullTextSearchPlaylists(ctx context.Context, query string, limit uint32) ([]models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullTextSearchPlaylists", ctx, query, limit)
	ret0, _ := ret[0].([]models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullTextSearchPlaylists indicates an expected call of FullTextSearchPlaylists.
func (mr *MockRepositoryMockRecorder) FullTextSearchPlaylists(ctx, query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullTextSearchPlaylists", reflect.TypeOf((*MockRepository)(nil).FullTextSearchPlaylists), ctx, query, limit)
}

// FullTextSearchTracks mocks base method.
func (m *MockRepository) FullTextSearchTracks(ctx context.Context, query string, limit uint32) ([]models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullTextSearchTracks", ctx, query, limit)
	ret0, _ := ret[0].([]models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullTextSearchTracks indicates an expected call of FullTextSearchTracks.
func (mr *MockRepositoryMockRecorder) FullTextSearchTracks(ctx, query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullTextSearchTracks", reflect.TypeOf((*MockRepository)(nil).FullTextSearchTracks), ctx, query, limit)
}

// MockTables is a mock of Tables interface.
type MockTables struct {
	ctrl     *gomock.Controller
	recorder *MockTablesMockRecorder
}

// MockTablesMockRecorder is the mock recorder for MockTables.
type MockTablesMockRecorder struct {
	mock *MockTables
}

// NewMockTables creates a new mock instance.
func NewMockTables(ctrl *gomock.Controller) *MockTables {
	mock := &MockTables{ctrl: ctrl}
	mock.recorder = &MockTablesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTables) EXPECT() *MockTablesMockRecorder {
	return m.recorder
}

// Albums mocks base method.
func (m *MockTables) Albums() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Albums")
	ret0, _ := ret[0].(string)
	return ret0
}

// Albums indicates an expected call of Albums.
func (mr *MockTablesMockRecorder) Albums() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Albums", reflect.TypeOf((*MockTables)(nil).Albums))
}

// Artists mocks base method.
func (m *MockTables) Artists() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Artists")
	ret0, _ := ret[0].(string)
	return ret0
}

// Artists indicates an expected call of Artists.
func (mr *MockTablesMockRecorder) Artists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Artists", reflect.TypeOf((*MockTables)(nil).Artists))
}

// Playlists mocks base method.
func (m *MockTables) Playlists() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Playlists")
	ret0, _ := ret[0].(string)
	return ret0
}

// Playlists indicates an expected call of Playlists.
func (mr *MockTablesMockRecorder) Playlists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Playlists", reflect.TypeOf((*MockTables)(nil).Playlists))
}

// Tracks mocks base method.
func (m *MockTables) Tracks() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tracks")
	ret0, _ := ret[0].(string)
	return ret0
}

// Tracks indicates an expected call of Tracks.
func (mr *MockTablesMockRecorder) Tracks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracks", reflect.TypeOf((*MockTables)(nil).Tracks))
}
